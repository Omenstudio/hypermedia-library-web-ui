var App = {};

App.doc = '';


App.connectToService = function (service_url) {
    // Enable visual styles
    showOverlay();
    $('#first-screen').css('display', 'none');

    // Get data from server
    // We need to make async call not to freeze the screen
    setTimeout(function () {
        // first of all - parse entrypoint
        var foundCollections = ServiceConnector.loadEntryPointAndDoc(service_url);
        for (var i in foundCollections) {
            Models[foundCollections[i].itemId].collectionUrl = foundCollections[i].url;
        }

        // Link to buttons
        Renderer.updateMenu(foundCollections);

        // Update list and item areas
        Renderer.resetContentAreas();

        // Update
        $('#service-screen').css('display', 'block');

        // End
        hideOverlay();


        // Scroll then fix feature
        // TODO restore this
        // var fixmeTop = $('.fixme').offset().top;
        // var fixmeLeft = $('.fixme').offset().left - 8;
        // var fixmeWidth = $('.fixme').width();
        // $(window).scroll(function () {                  // assign scroll event listener
        //     var currentScroll = $(window).scrollTop(); // get current position
        //     if (currentScroll >= fixmeTop) {           // apply position: fixed if you
        //         $('.fixme').css({                      // scroll to that element or below it
        //             position: 'fixed',
        //             top: '0',
        //             left: fixmeLeft,
        //             width: fixmeWidth,
        //             height: screen.height
        //         });
        //     } else {                                   // apply position: static
        //         $('.fixme').css({                      // if you scroll above it
        //             position: 'static',
        //             height: 'auto'
        //         });
        //     }
        // });

    }, 1);


    // Info about current service
    $('#current-service-url-info').text(service_url);
};


App.showCollectionForModel = function (model, sync) {
    showOverlay();

    var doit = function () {
        // first of all - parse entrypoint
        var collectionItems = ServiceConnector.loadCollection(model, model.collectionUrl);

        // Update list and item areas
        Renderer.renderCollection(collectionItems, model);

        Renderer.resetItemArea();

        // Add new Entity object Button
        $('.btn-add-entity').click(function (e) {
            e.preventDefault();
            Renderer.renderItemChange(model, model.collectionUrl);

            // Initialize Datepicker
            $('.datepicker').datepicker({dateFormat: 'yy-mm-dd'});

            // Remove links
            $('#save-form .items a td').each(function () {
                var val = $(this).html();
                $(this).closest('a').parent().html(val);
            });

            // Buttons to select, add ot clear link to other entities
            $('.btn-select-item').click(function (e) {
                e.preventDefault();
                var itemsDiv = $(this).closest('.form-row').find('.items');
                var model = Models[itemsDiv.attr('data-type')];
                App.showSelectDialog(model, function (url, content) {
                    itemsDiv.html('<div class="item" data-url="' + url + '">' + content + '</div>');
                    itemsDiv.find('a td').each(function () {
                        var oldHtml = $(this).html();
                        $(this).closest('a').parent().html(oldHtml);
                    });
                });
            });
            $('.btn-add-item').click(function (e) {
                e.preventDefault();
                var itemsDiv = $(this).closest('.form-row').find('.items');
                var model = Models[itemsDiv.attr('data-type')];
                App.showSelectDialog(model, function (url, content) {
                    var isFound = false;
                    itemsDiv.find('.item').each(function () {
                        if ($(this).attr('data-url') === url) {
                            isFound = true;
                            return 0;
                        }
                    });
                    if (isFound) {
                        return;
                    }

                    itemsDiv.append('<div class="item" data-url="' + url + '">' + content + '</div>');
                    itemsDiv.find('a td').each(function () {
                        var oldHtml = $(this).html();
                        $(this).closest('a').parent().html(oldHtml);
                    });
                });
            });
            $('.btn-clear-items').click(function (e) {
                e.preventDefault();
                $(this).closest('.form-row').find('.item').remove();
            });

            // Buttons to control saving / cancelling
            $('.btn-cancel').click(function () {
                App.showItemForModel(item.url, model);
            });
            $('.btn-save').click(function () {
                App.saveItemForModel($('#save-form'), true);
                App.showCollectionForModel(model);
            });
        });


        // Item loading link
        $('.service-item-list li a').click(function (e) {
            e.preventDefault();

            $('.service-item-list li').removeClass('active');
            $(this).parent().addClass('active');

            App.showItemForModel($(this).attr('href'), model);

            $('html, body').animate({
                scrollTop: $("#service-screen").offset().top
            }, 300);
        });

        // End
        hideOverlay();
    };

    if (typeof sync !== 'undefined') {
        doit();
    }
    else {
        // Get data from server
        // We need to make async call not to freeze the screen
        setTimeout(doit, 1);
    }
};


App.showItemForModel = function (itemUrl, model) {
    showOverlay();

    var doit = function () {
        // first of all - parse EntryPoint
        var item = ServiceConnector.loadItem(model, itemUrl);

        // Update list and item areas
        Renderer.renderItem(item, model);

        // Bind links to entities
        $('.popup').click(function (e) {
            e.preventDefault();

            var model = Models[$(this).attr('data-model-id')];
            var itemUrl = $(this).attr('href');

            // Menu reset
            $('.control-buttons .btn').removeClass('btn-primary');
            $(model.collectionButtonSelector).addClass('btn-primary');

            // Load list of model entities
            App.showCollectionForModel(model, true);
            $('.service-item-list a').each(function () {
                if ($(this).attr('href') === itemUrl) {
                    $(this).parent().addClass('active');
                    return 0;
                }
            });

            // Load entity
            App.showItemForModel(itemUrl, model);
        });

        // Bind Edit button
        $('.btn-edit').click(function () {
            Renderer.renderItemChange(model, item.url, item);

            // Initialize Datepicker
            $('.datepicker').datepicker({dateFormat: 'yy-mm-dd'});

            // Remove links
            $('#save-form .items a td').each(function () {
                var val = $(this).html();
                $(this).closest('a').parent().html(val);
            });

            // Buttons to select, add ot clear link to other entities
            $('.btn-select-item').click(function (e) {
                e.preventDefault();
                var itemsDiv = $(this).closest('.form-row').find('.items');
                var model = Models[itemsDiv.attr('data-type')];
                App.showSelectDialog(model, function (url, content) {
                    itemsDiv.html('<div class="item" data-url="' + url + '">' + content + '</div>');
                    itemsDiv.find('a td').each(function () {
                        var oldHtml = $(this).html();
                        $(this).closest('a').parent().html(oldHtml);
                    });
                });
            });
            $('.btn-add-item').click(function (e) {
                e.preventDefault();
                var itemsDiv = $(this).closest('.form-row').find('.items');
                var model = Models[itemsDiv.attr('data-type')];
                App.showSelectDialog(model, function (url, content) {
                    var isFound = false;
                    itemsDiv.find('.item').each(function () {
                        if ($(this).attr('data-url') === url) {
                            isFound = true;
                            return 0;
                        }
                    });
                    if (isFound) {
                        return;
                    }

                    itemsDiv.append('<div class="item" data-url="' + url + '">' + content + '</div>');
                    itemsDiv.find('a td').each(function () {
                        var oldHtml = $(this).html();
                        $(this).closest('a').parent().html(oldHtml);
                    });
                });
            });
            $('.btn-clear-items').click(function (e) {
                e.preventDefault();
                $(this).closest('.form-row').find('.item').remove();
            });

            // Buttons to control saving / cancelling
            $('.btn-cancel').click(function () {
                App.showItemForModel(item.url, model);
            });
            $('.btn-save').click(function () {
                App.saveItemForModel($('#save-form'));
                App.showItemForModel(item.url, model);
            });


        });

        // Bind Remove button
        $('.btn-remove').click(function () {
            ServiceConnector.removeItem($(this).attr('href'));
            App.showCollectionForModel(model);
        });


        // End
        hideOverlay();
    };

    // Get data from server
    // We need to make async call not to freeze the screen
    setTimeout(doit, 1);
};


App.saveItemForModel = function (formNode, is_new) {
    // First of all - collect linked Entities to field values
    formNode.find('.item-select').each(function () {
        var inputValue = '';
        $(this).find('.item').each(function () {
            var itemValueArr = $(this).attr('data-url').replace(new RegExp('-', 'g'), '/').split('/');
            inputValue += itemValueArr[itemValueArr.length - 1] + ', ';
        });
        if (inputValue !== '') {
            inputValue = inputValue.substr(0, inputValue.length - 2);
        }

        $(this).find('input').val(inputValue);
    });


    var data = {};
    formNode.find('input').each(function () {
        data[$(this).attr('name')] = $(this).val();
    });

    if (typeof is_new === 'undefined') {
        ServiceConnector.saveItem(formNode.attr('data-url'), JSON.stringify(data));
    }
    else {
        ServiceConnector.addItem(formNode.attr('data-url'), JSON.stringify(data));
    }
};


App.showSelectDialog = function (model, callbackFunc) {
    var itemsList = ServiceConnector.loadCollection(model, model.collectionUrl);
    var itemsListHtml = Renderer.buildCollectionHtml(itemsList, model);
    showDialog('Select the ' + model.simpleName, itemsListHtml, callbackFunc);
};


App.initialize = function () {
    // Inject to page
    // $('#current-screen').html(data);

    // Fill url param
    var queryParams = {};
    if (window.location.search.length > 1) {
        for (var aItKey, nKeyId = 0, aCouples = window.location.search.substr(1).split("&"); nKeyId < aCouples.length; nKeyId++) {
            aItKey = aCouples[nKeyId].split("=");
            queryParams[unescape(aItKey[0])] = aItKey.length > 1 ? unescape(aItKey[1]) : "";
        }
    }
    if ('url' in queryParams) {
        $('.addressbar .url').val(queryParams.url);
    }

    // "Load service" button
    $('.addressbar').submit(function (e) {
        e.preventDefault();

        var url = $(this).find('.url').val().trim();
        if (!url.length) {
            alert('Please, enter valid URL');
            return;
        }

        if (url.indexOf('http') !== 0) {
            url = 'http://' + url;
        }

        App.connectToService(url);

        return false;
    });

    // Button group switching
    $('.control-buttons .btn').click(function () {
        $('.control-buttons .btn').removeClass('btn-primary');
        $(this).addClass('btn-primary');
        for (var i in Models) {
            if ($(this).is(Models[i].collectionButtonSelector)) {
                App.showCollectionForModel(Models[i]);
            }
        }
    });

    // Links on first screen
    $('.first-screen-wrapper a').click(function (e) {
        e.preventDefault();
        App.connectToService($(this).attr('href'));
    });

    $('#service-screen').css('display', 'none');
};


$(document).ready(function () {
    hideOverlay();
    App.initialize();
});





function showOverlay() {
    $('#overlay').css('display', 'grid');
}

function hideOverlay() {
    $('#overlay').css('display', 'none');
}

function showDialog(title, content, callbackFunc) {
    closeDialog();

    var wrap = '<div class="center-point">' +
        '<div class="dialog">' +
        '<h2>' + title + '</h2>' +
        '<div class="dialog-content">' + content + '</div>' +
        '<button class="btn btn-danger btn-close-dialog">Cancel</button>' +
        '</div>' +
        '</div>';


    $('body').append(wrap);
    showOverlay();

    // Cancel button handler
    $('.btn-close-dialog').click(function (e) {
        e.preventDefault();
        closeDialog();
    });

    // Callback on
    $('.dialog-content a').click(function (e) {
        e.preventDefault();
        var htmlNode = $(this).closest('a');
        var url = htmlNode.attr('href');
        callbackFunc(url, htmlNode.parent().clone().wrap('<div></div>').parent().html());
        closeDialog();
    });
}

function closeDialog() {
    $('.dialog').remove();
    hideOverlay();
}
var Renderer = {};


Renderer.updateMenu = function (collections) {
    for (var modelKey in Models) {
        var model = Models[modelKey];
        var btn = $(model.collectionButtonSelector);
        btn.removeAttr('disabled');
        btn.removeAttr('title');
        if (model.collectionUrl === '') {
            btn.attr('disabled', 'disabled');
            btn.attr('title', 'Not mapped in current service');
        }
    }
};


Renderer.resetContentAreas = function () {
    Renderer.resetCollectionArea();
    Renderer.resetItemArea();
};


Renderer.resetCollectionArea = function () {
    $('.service-item-list').html('<p class="tip">Please, select the menu item from top part of the screen</p>');
};


Renderer.resetItemArea = function () {
    $('.service-item-content').html('<p class="tip">Please, select the item to show from list in left part of the screen</p>');
};


Renderer.buildCollectionHtml = function (collection, model) {
    var res = '<ul>';

    if (collection.length !== 0) {
        for (var i in collection) {
            var item = collection[i];
            res += model.renderShortView(item);
        }
    }
    else {
        res += '<p class="tip">There are no ' + model.simpleName + 's on the service</p>';
    }

    res += '</ul>';
    return res;
};


Renderer.renderCollection = function (collection, model) {
    $('.service-item-list').html(Renderer.buildCollectionHtml(collection, model));
    $('.service-item-list').prepend('<div class="btn-add-wrapper"><button class="btn btn-info btn-add-entity">Add new ' + model.simpleName + '</button></div>');
};


Renderer.renderItem = function (item, model) {
    var renderedData = model.renderView(item);

    // Edit and Remove buttons
    var buttons = '';
    if (ServiceConnector.isModelSupportOperation(model, "PUT")) {
        buttons += '<button class="btn btn-warning btn-edit" href="' + item.url + '">Edit ' + model.simpleName.toLowerCase() + '</button>';
    }
    if (ServiceConnector.isModelSupportOperation(model, "DELETE")) {
        buttons += '<button class="btn btn-danger btn-remove" href="' + item.url + '">Delete ' + model.simpleName.toLowerCase() + '</button>';
    }
    buttons = '<div class="item-control-buttons">' + buttons + '</div>';

    // setting content
    $('.service-item-content').html('<div class="item-wrapper">' + renderedData + buttons + '</div>');
};


Renderer.renderItemChange = function (model, postUrl, item) {
    // Title
    var action = 'Edit';
    if (typeof item === 'undefined') {
        action = 'Save';
    }
    var title = '<h2>' + action + ' ' + model.simpleName + '</h2>';


    // Form
    var formData = '<form id="save-form" data-url="' + postUrl + '">';

    var properties = ServiceConnector.vocab[model.id].supportedProperties;
    for (var i in properties) {
        formData += Renderer.renderPropertyInput(properties[i], model, item);
    }

    formData += '</form>';


    // Save and Cancel buttons
    var saveUrl = model.collectionUrl;
    if (typeof item !== 'undefined') {
        saveUrl = item.url;
    }
    var cancelUrl = model.collectionUrl;
    if (typeof item !== 'undefined') {
        cancelUrl = item.url;
    }
    var buttons = '<div class="item-control-buttons">' +
        '<button class="btn btn-success btn-save href="' + saveUrl + '">Save</button>' +
        '<button class="btn btn-danger btn-cancel" href="' + cancelUrl + '">Cancel</button>' +
        '</div>';


    // Build
    $('.service-item-content').html('<div class="item-wrapper">' + title + formData + buttons + '</div>');
};


Renderer.renderProperty = function (title, prop) {
    if (typeof prop !== 'undefined') {
        if (title.toLowerCase().indexOf('date') !== -1) {
            prop = Renderer.formatDate(prop);
        }

        return '<tr><th>' + title + '</th><td>' + prop + '</td></tr>';
    }
    return '';
};


Renderer.renderPropertyInput = function (propertyObject, model, item) {
    var type = propertyObject.property;
    var modelPropertyName = model.propertiesMap[type];


    // If field is link to other Service entity ->
    //      we need to render it properly
    if (typeof Models[type] !== 'undefined') {
        var linkModel = Models[type];
        var linkItem = typeof item === 'undefined' ? null : item[modelPropertyName];

        var itemsHtml = '';
        if (typeof linkItem !== 'undefined' && linkItem !== null) {
            itemsHtml += '<div class="item" data-url="' + linkItem.url + '">' + linkModel.renderShortView(linkItem) + '</div>';
        }

        return '<div class="form-row item-select">' +
            '<label>' + propertyObject.hydra_description + '</label>' +
            '<input name="' + propertyObject.hydra_title + '" hidden="hidden"/>' +
            '<div class="items" data-url="' + linkModel.collectionUrl + '" data-type="' + linkModel.id + '">' +
            itemsHtml +
            '</div>' +
            '<div class="select-btns">' +
            '<button class="btn btn-info btn-select-item">Select</button>' +
            '<button class="btn btn-info btn-clear-items">Clear</button>' +
            '</div>' +
            '</div>';
    }

    // If it is collection -> output as collection
    if (typeof ServiceConnector.collectionsMap[type] !== 'undefined') {
        type = ServiceConnector.collectionsMap[type];
        modelPropertyName = model.propertiesMap[type];

        if (typeof Models[type] !== 'undefined') {
            var linkItemsHtml = '';
            var linkModel = Models[type];

            if (typeof item !== 'undefined') {
                for (var i in item[modelPropertyName]) {
                    var linkItem = item[modelPropertyName][i];

                    linkItemsHtml += '<div class="item" data-url="' + linkItem.url + '">' +
                        linkModel.renderShortView(linkItem) +
                        '</div>';
                }
            }

            return '<div class="form-row item-select">' +
                '<label>' + propertyObject.hydra_description + '</label>' +
                '<input name="' + propertyObject.hydra_title + '" hidden="hidden"/>' +
                '<div class="items" data-url="' + linkModel.collectionUrl + '" data-type="' + linkModel.id + '">' + linkItemsHtml + '</div>' +
                '<div class="select-btns">' +
                '<button class="btn btn-info btn-add-item">Add</button>' +
                '<button class="btn btn-info btn-clear-items">Clear</button>' +
                '</div>' +
                '</div>';
        }
    }

    var inputValue = '';
    if (typeof item !== 'undefined' && typeof item[modelPropertyName] !== 'undefined') {
        inputValue = item[modelPropertyName];
    }


    // If it is Date field
    if (propertyObject.property.toLowerCase().indexOf('date') !== -1) {
        inputValue = Renderer.formatDate(inputValue);

        return '<div class="form-row">' +
            '<label>' + propertyObject.hydra_description + '</label>' +
            '<input name="' + propertyObject.hydra_title + '" ' +
            'placeholder="' + modelPropertyName + '" ' +
            'value="' + inputValue + '" ' +
            'class="datepicker" type="text" />' +
            '</div>';
    }

    // If it is usual field
    return '<div class="form-row">' +
        '<label>' + propertyObject.hydra_description + '</label>' +
        '<input name="' + propertyObject.hydra_title + '" ' +
        'placeholder="' + modelPropertyName + '" ' +
        'value="' + inputValue + '" />' +
        '</div>';
};


Renderer.formatDate = function(dateStr) {
    if (dateStr === '') {
        return '';
    }

    var ans = new Date(Date.parse(dateStr));
    var year = ans.getFullYear().toString();
    var month = (1+ans.getMonth()).toString();
    if (month.length === 1) {
        month = '0' + month;
    }
    var day = ans.getDate().toString();
    if (day.length === 1) {
        day = '0' + day;
    }
    return year + '-' + month + '-' + day;
};
function invokeRequest(method, url, data, headers) {
    var self = this;

    var settings = {
        'type': method || 'GET',
        'headers': headers || { 'Accept': 'application/ld+json, application/json;q=0.1' },
        'processData': false,
        'data': data || null,
        'dataType': 'text',
        'async': false
    };

    return $.ajax('proxy.php?url=' + encodeURI(url), settings);
}

function invokeJsonRequest(method, url, data, headers) {
    var self = this;

    var settings = {
        'type': method || 'GET',
        'headers': { 'Accept': 'application/ld+json, application/json;q=0.1' },
        'processData': false,
        'data': data || null,
        'dataType': 'json',
        contentType: "application/json; charset=utf-8",
        'async': false
    };

    return $.ajax('proxy.php?url=' + encodeURI(url), settings);
}


function parseLinkHeader(header) {
    var links = {};

    if (!header || (0 === header.trim().length)) {
        return links;
    }

    var parts = header.split(',');

    for(var i = parts.length - 1; i >= 0; i--) {
        var params = parts[i].split(';');
        var url, rel;
        for (var j = params.length - 1; j >= 0; j--) {
            if ('<' === params[j].trim()[0]) {
                url = params[j].trim().slice(1, -1);
            } else {
                var p = params[j].split('=');
                if ((2 === p.length) && ('rel' === p[0].trim())) {
                    rel = p[1].trim().slice(1, -1);
                }
            }
        }
        if (url && rel) {
            links[rel] = url;
        }
    }

    return links;
}


function parseDocumentationUrlAndLoad(jqXHR) {
    var linkHeaders = parseLinkHeader(jqXHR.getResponseHeader('Link'));
    if (!linkHeaders['http://www.w3.org/ns/hydra/core#apiDocumentation']) {
        alert('Cannot find link to vocab header');
    }
    return loadDocumentation(linkHeaders['http://www.w3.org/ns/hydra/core#apiDocumentation']);
}


function loadDocumentation(apiDocUrl) {
    var result = {};

    $.ajax({
        url: 'proxy.php',
        dataType: 'json',
        async: false,
        data: { 'url': apiDocUrl, 'vocab': 1 },
        success: function(resource) {
            var tmp = resource['@graph'];

            for (var i in tmp) {
                result[tmp[i]['@id']] = tmp[i];
            }
        },
        error: function () {
            alert('Failed to parse vocab');
        }
    });

    return result;
}
var ServiceConnector = {};
ServiceConnector.vocab = '';
ServiceConnector.collectionsMap = {}; // need to determine what's type of objects collection contains

ServiceConnector.loadEntryPointAndDoc = function (entryPointUrl) {
    var foundCollections = [];

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", entryPointUrl).done(function (resource, textStatus, jqXHR) {

        // Firstly we need to parse documentation
        if (ServiceConnector.vocab === '') {
            ServiceConnector.vocab = parseDocumentationUrlAndLoad(jqXHR);
        }

        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);

        // Parse entrypoint to link collections and urls
        foundCollections = ServiceConnector._parseEntryPoint(resource);
    });

    return foundCollections;
};


ServiceConnector._parseEntryPoint = function (resource) {
    // Iterate over given response
    // and try to find Entity collection
    // For instance, EntryPoint returned response:
    //      books: /api/books_list
    //      authors: /api/authors_management
    //      publishers: /api/publishers
    // We need to iterate over books, authors and publishers and
    // detect which type of Entity they contain
    var foundCollections = [];

    for (var entryPointItemKey in resource) {
        // skip if this is not regular field
        if (entryPointItemKey[0] === '@') {
            continue;
        }

        // Detect url, type, and collection item
        var item = resource[entryPointItemKey];
        var itemUrl = item.__value.__value['@id'];
        var itemType = ServiceConnector.vocab[item.__iri]['range'];
        var memberOf = ServiceConnector.vocab[itemType]['member_of'];
        // var description = ServiceConnector.vocab[itemType]['description'];

        foundCollections.push({itemId: memberOf, url: itemUrl});
    }

    return foundCollections;
};


ServiceConnector.loadCollection = function (model, collectionUrl) {
    var items = [];

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", collectionUrl).done(function (resource, textStatus, jqXHR) {
        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);

        if (resource !== null) {
            var membersArray = resource.members.__value;

            for (var elemId in membersArray) {
                items.push(ServiceConnector.parseResponseAsModelObject(model, membersArray[elemId]));
            }
        }
    });

    return items;
};


ServiceConnector.loadItem = function (model, itemUrl) {
    var res = {};

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", itemUrl).done(function (resource, textStatus, jqXHR) {
        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);
        res = ServiceConnector.parseResponseAsModelObject(model, resource);
    });

    return res;
};


ServiceConnector.parseResponseAsModelObject = function (model, jsonItem) {
    var answer = {};

    answer.url = ServiceConnector.parseToId(jsonItem['@id']);
    answer.type = ServiceConnector.parseToId(jsonItem['@type']);

    var vocabDefinedProperties = ServiceConnector.vocab[answer.type].supportedProperties;

    for (var propTitle in jsonItem) {
        if (propTitle[0] === '@') {
            continue;
        }

        var prop = jsonItem[propTitle];

        // Finding type of this property
        var propType = '';
        for (var vocabPropId in vocabDefinedProperties) {
            var vocabProp = vocabDefinedProperties[vocabPropId];
            if (vocabProp['hydra_title'] === propTitle) {
                propType = vocabProp['property'];
                break;
            }
        }


        // May be it is a collection ?
        var currentFieldArray = [];
        if (propType === '' || typeof model.propertiesMap[propType] === 'undefined') {
            var potentialCollection = prop.__value;
            if (typeof potentialCollection !== 'undefined' && $.isArray(potentialCollection) &&
                potentialCollection.length > 0) {
                var collectionVocabType = propType;

                // parse all objects
                for (var i in potentialCollection) {
                    if (currentFieldArray.length === 0) {
                        propType = ServiceConnector.parseToId(potentialCollection[i]['@type']);
                    }

                    currentFieldArray.push(ServiceConnector.parseResponseAsModelObject(Models[propType], potentialCollection[i]));
                }

                ServiceConnector.collectionsMap[collectionVocabType] = propType
            }
            else {
                continue;
            }
        }

        // Forming key and value params
        var propKey = model.propertiesMap[propType];
        var propValue = '';
        try {
            if (currentFieldArray.length > 0) {
                propValue = currentFieldArray
            }
            else { //if (typeof prop !== 'object' || prop.length > 0) {
                propValue = ServiceConnector.parseToValue(prop);
            }
        }
        catch (err) {
            try {
                var newModel = Models[prop.__value['@type']];
                if (typeof newModel === 'undefined') {
                    newModel = Models[prop.__iri];
                }
                propValue = ServiceConnector.parseResponseAsModelObject(newModel, prop.__value);
            }
            catch(err) {
                return answer;
            }
        }

        answer[propKey] = propValue;
    }


    return answer;
};


ServiceConnector.parseToId = function (jsonItem) {
    while (typeof jsonItem !== 'string') {
        jsonItem = jsonItem.__value;
        if (typeof jsonItem['@id'] !== 'undefined') {
            jsonItem = jsonItem['@id'];
            break;
        }
    }
    return jsonItem;
};


ServiceConnector.parseToValue = function (jsonItem) {
    while (typeof jsonItem === 'object') {
        jsonItem = jsonItem.__value;
        if (typeof jsonItem['@value'] !== 'undefined') {
            jsonItem = jsonItem['@value'];
            break;
        }
    }
    return jsonItem;
};


ServiceConnector.isModelSupportOperation = function(model, operation) {
    var operations = ServiceConnector.vocab[model.id].supportedOperations;
    for (var i in operations) {
        if (operations[i].method.toLowerCase() === operation.toLowerCase()) {
            return true;
        }
    }

    return false;
};


ServiceConnector.removeItem = function(url) {
    return invokeRequest('DELETE', url);
};

ServiceConnector.saveItem = function(url, data) {
    return invokeJsonRequest('PUT', url, data);
};

ServiceConnector.addItem = function(url, data) {
    return invokeJsonRequest('POST', url, data);
};
var Article = {};
Article.id = 'http://schema.org/Article';
Article.collectionUrl = '';  // autowired
Article.collectionButtonSelector = '.js-articles-btn';
Article.simpleName = 'Article';
Article.propertiesMap = {
    'http://schema.org/headline': 'title',
    'http://schema.org/description': 'description',
    'http://schema.org/pageStart': 'start page',
    'http://schema.org/pageEnd': 'end page',
    'http://schema.org/wordCount': 'number of words',
    'http://schema.org/Person': 'authors',
    'http://schema.org/Book': 'magazine'
};


Article.renderLinkView = function (article) {
    return '<li><a href="' + article.url + '" class="popup" data-model-id="http://schema.org/Article">' +
        article.title +
        '</a></li>'
};


Article.renderShortView = function (curArticle) {
    var res = '<li><a href="' + curArticle.url + '">';

    if (typeof curArticle.title !== 'undefined') {
        res += '<div class="short-article-title">' + curArticle.title + '</div>';
    }

    if (typeof curArticle.authors !== 'undefined') {
        var authors_list_str = '';
        for (var i in curArticle.authors) {
            authors_list_str += curArticle.authors[i].name + ', ';
        }
        authors_list_str = authors_list_str.substr(0, authors_list_str.length - 2);

        res += '<div class="short-article-authors">' + authors_list_str + '</div>';
    }

    res += '</a></li>';
    return res;
};


Article.renderView = function (obj) {
    var res = '';

    // Title
    if (typeof obj.title !== 'undefined') {
        res += '<h2>' + obj.title + '</h2>';
    }

    res += '<table>';

    // Authors
    if (typeof obj.authors !== 'undefined') {
        res += '<tr><th>Authors:</th><td>';
        for (var i in obj.authors) {
            res += Author.renderLinkView(obj.authors[i]);
        }
        res += '</td></tr>';
    }

    // Magazine
    if (typeof obj.magazine !== 'undefined') {
        res += Book.renderLinkView(obj.magazine, 'Magazine');
    }

    // Description
    res += Renderer.renderProperty('Description:', obj['description']);

    // Pages
    var pages = '';
    if (typeof obj['start page'] !== 'undefined') {
        pages += obj['start page']
    }
    if (typeof obj['end page'] !== 'undefined') {
        pages += '-' + obj['end page']
    }
    res += Renderer.renderProperty('Pages:', pages);

    // Number of words
    res += Renderer.renderProperty('Number of words:', obj['number of words']);

    res += '</table>';
    return res;
};


var Author = {};
Author.id = 'http://schema.org/Person';
Author.collectionUrl = '';  // autowired
Author.collectionButtonSelector = '.js-authors-btn';
Author.simpleName = 'Author';
Author.propertiesMap = {
    'http://schema.org/name': 'name',
    'http://schema.org/birthDate': 'birthDate',
    'http://schema.org/birthPlace': 'birthPlace'
};


Author.renderLinkView = function (author) {
    return '<li><a href="' + author.url + '" class="popup" data-model-id="http://schema.org/Person">' +
        author.name +
        '</a></li>'
};


Author.renderShortView = function (obj) {
    var res = '<li><a href="' + obj.url + '"><table>';

    res += Renderer.renderProperty('', obj['name']);

    res += '</table></a></li>';
    return res;
};


Author.renderView = function (obj) {
    var res = '';

    if (typeof obj['name'] !== 'undefined') {
        res += '<h2>' + obj['name'] + '</h2>';
    }

    res += '<table>';
    res += Renderer.renderProperty('Date of birth:', obj['birthDate']);
    res += Renderer.renderProperty('Place of birth:', obj['birthPlace']);
    res += '</table>';

    return res;
};
var Book = {};
Book.id = 'http://schema.org/Book';
Book.collectionUrl = '';  // autowired
Book.collectionButtonSelector = '.js-books-btn';
Book.simpleName = 'Book';
Book.propertiesMap = {
    'http://schema.org/headline': 'title',
    'http://schema.org/alternativeHeadline': 'alternativeTitle',
    'http://schema.org/description': 'description',
    'http://schema.org/copyrightYear': 'copyrightYear',
    'http://schema.org/bookEdition': 'bookEdition',
    'http://schema.org/numberOfPages': 'numberOfPages',
    'http://schema.org/isbn': 'isbn',
    'http://schema.org/Person': 'authors',
    'http://schema.org/Publisher': 'publisher'
};


Book.renderLinkView = function (book, customTitle) {
    if (typeof customTitle === 'undefined') {
        customTitle = 'Book';
    }

    return '<tr><th>' + customTitle + ':</th><td><a href="' + book.url + '" class="popup" data-model-id="http://schema.org/Book">' +
        book.title +
        '</a></td></tr>'
};


Book.renderShortView = function (obj) {
    var res = '<li><a href="' + obj.url + '">';

    res += Renderer.renderProperty('', obj.title);

    res += '<div class="additional-book-info">';
    // Authors
    if (typeof obj.authors !== 'undefined') {
        var add_info_str = '';

        if ($.isArray(obj.authors)) {
            for (var i in obj.authors) {
                add_info_str += obj.authors[i].name + ', ';
            }
        }
        else {
            add_info_str += obj.authors.name + ', ';
        }

        add_info_str = add_info_str.substr(0, add_info_str.length - 2);

        res += '<div class="short-book-authors">written by ' + add_info_str + '</div>';
    }

    // Publisher
    if (typeof obj.publisher !== 'undefined') {
        res += '<div class="short-book-publisher">published by ' + obj.publisher.name + '</div>';
    }

    res += '</div>';

    res += '</a></li>';
    return res;
};


Book.renderView = function (obj) {
    var res = '';

    if (typeof obj['title'] !== 'undefined') {
        res += '<h2>' + obj['title'] + '</h2>';
    }

    res += '<table>';

    // Authors
    if (typeof obj.authors !== 'undefined') {
        res += '<tr><th>Written by:</th><td>';
        if ($.isArray(obj.authors)) {
            for (var i in obj.authors) {
                res += Author.renderLinkView(obj.authors[i]);
            }
        }
        else {
            res += Author.renderLinkView(obj.authors);
        }
        res += '</td></tr>';
    }

    // Magazine
    if (typeof obj.publisher !== 'undefined') {
        res += '<tr><th>Published by:</th><td>' + Publisher.renderLinkView(obj.publisher) + '</td></tr>';
    }

    res += Renderer.renderProperty('Alt. title:', obj['alternativeTitle']);
    res += Renderer.renderProperty('Description:', obj['description']);
    res += Renderer.renderProperty('Publish year:', obj['copyrightYear']);
    res += Renderer.renderProperty('Page count:', obj['numberOfPages']);
    res += Renderer.renderProperty('Edition:', obj['bookEdition']);
    res += Renderer.renderProperty('ISBN:', obj['isbn']);

    // res += Renderer.renderProperty('Person:', obj['Person']);
    // res += Renderer.renderProperty('Publisher:', obj['Publisher']);

    res += '</table>';
    return res;
};
var Publisher = {};
Publisher.id = 'http://schema.org/Publisher';
Publisher.collectionUrl = '';  // autowired
Publisher.collectionButtonSelector = '.js-publishers-btn';
Publisher.simpleName = 'Publisher';
Publisher.propertiesMap = {
    'http://schema.org/name': 'name',
    'http://schema.org/foundingDate': 'foundingDate',
    'http://schema.org/location': 'location'
};


Publisher.renderLinkView = function (publisher) {
    return '<li><a href="' + publisher.url + '" class="popup" data-model-id="http://schema.org/Publisher">' +
        publisher.name +
        '</a></li>'
};


Publisher.renderShortView = function (obj) {
    var res = '<li><a href="' + obj.url + '"><table>';

    res += Renderer.renderProperty('', obj['name']);

    res += '</table></a></li>';
    return res;
};


Publisher.renderView = function (obj) {
    var res = '';

    if (typeof obj['name'] !== 'undefined') {
        res += '<h2>' + obj['name'] + '</h2>';
    }

    res += '<table>';

    res += Renderer.renderProperty('Founding date:', obj['foundingDate']);
    res += Renderer.renderProperty('Current location:', obj['location']);

    res += '</table>';
    return res;
};
var Models = {
    'http://schema.org/Article': Article,
    'http://schema.org/Person': Author,
    'http://schema.org/Book': Book,
    'http://schema.org/Publisher': Publisher
};