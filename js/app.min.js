var App = {};

App.doc = '';


App.connectToService = function(service_url) {
    // Enable visual styles
    showOverlay();
    $('#first-screen').css('display', 'none');

    // Get data from server
    // We need to make async call not to freeze the screen
    setTimeout(function () {
        // first of all - parse entrypoint
        var foundCollections = DataProcessor.load(service_url);
        // Next - buttons
        // renderServicePage();
        $('#service-screen').css('display', 'block');
        hideOverlay();
    }, 1);


    // Info about current service
    $('#current-service-url-info').text(service_url);


    console.log(service_url);
};























App.initialize = function () {
    // Inject to page
    // $('#current-screen').html(data);

    // Fill url param
    var queryParams = {};
    if (window.location.search.length > 1) {
        for (var aItKey, nKeyId = 0, aCouples = window.location.search.substr(1).split("&"); nKeyId < aCouples.length; nKeyId++) {
            aItKey = aCouples[nKeyId].split("=");
            queryParams[unescape(aItKey[0])] = aItKey.length > 1 ? unescape(aItKey[1]) : "";
        }
    }
    if ('url' in queryParams) {
        $('.addressbar .url').val(queryParams.url);
    }

    // "Load service" button
    $('.addressbar').submit(function (e) {
        e.preventDefault();

        var url = $(this).find('.url').val().trim();
        if (!url.length) {
            alert('Please, enter valid URL');
            return;
        }

        if (url.indexOf('http') !== 0) {
            url = 'http://' + url;
        }

        App.connectToService(url);

        return false;
    });

    // Button group visual switching
    $('.control-buttons .btn').click(function () {
        $('.control-buttons .btn').removeClass('btn-primary');
        $(this).addClass('btn-primary');
    });

    // Links on first screen
    $('.first-screen-wrapper a').click(function (e) {
        e.preventDefault();
        App.connectToService($(this).attr('href'));
    });

    $('#service-screen').css('display', 'none');
};


App.showArticles = function () {
    renderCollectionForModel(Article);
    // showOverlay();
    // // We need to make async call
    // setTimeout(function () {
    //     App.currentModel = Article;
    //     App.loadDataFromService(Article);
    //     App.buildCollectionView(Article);
    //
    //     hideOverlay();
    // }, 1);
};

App.showBooks = function () {
    $('.service-item-list').text('Books');
};

App.showAuthors = function () {
    $('.service-item-list').text('Authors');
};

App.showPublishers = function () {
    $('.service-item-list').text('showPublishers');
};


App.showForModel = function () {

};

App.loadDataFromService = function (obj) {
    App.currentObjects = [];

    var collection = loadRegularUrl(obj.collectionUrl).members.__value;
    for (var i in collection) {
        var itemUrl = collection[i]['@id'].__value.__value['@id'];
        App.currentObjects.push(loadRegularUrl(itemUrl));
    }
};


App.buildCollectionView = function(obj) {
    // Build html
    var listHtml = '<ul>';

    for(var i=0, cur = App.currentObjects[i]; i < App.currentObjects.length; ++i, cur = App.currentObjects[i]) {
        var itemHtml =
            '<li>' +
                '<a href="javascript:App.showElement(' + i + ')">' +
                    cur['title'].__value.__value['@value'] +
                '</a>' +
            '</li>';
        listHtml += itemHtml;
    }



    listHtml += '</ul>';
    $('.service-item-list').html(listHtml);
};


App.showElement = function (index) {
    var html = '<ul>';

    for (var i in App.currentObjects[index]) {
        var prop = App.currentObjects[index][i];
        var val = prop.__value.__orig_value;
        var iri = prop.__iri;
        html += '<li>' + val + '</li>';
    }

    html += '</ul>';
    $('.service-item-content').html(html);
};




$(document).ready(function () {
    hideOverlay();
    App.initialize();
});





var DataController = {};
DataController.doc = '';


DataController.loadEntryPointAndDoc = function (entryPointUrl) {
    var foundCollections = [];

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", entryPointUrl).done(function (resource, textStatus, jqXHR) {

        // Firstly we need to parse documentation
        if (DataController.vocab === '') {
            DataController.vocab = parseDocumentationUrlAndLoad(jqXHR);
        }

        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);

        // Parse entrypoint to link collections and urls
        foundCollections =  DataController._parseEntryPoint(resource);
    });

    return foundCollections;
};


DataController._parseEntryPoint = function (resource) {
    // Iterate over given response
    // and try to find Entity collection
    // For instance, EntryPoint returned response:
    //      books: /api/books_list
    //      authors: /api/authors_management
    //      publishers: /api/publishers
    // We need to iterate over books, authors and publishers and
    // detect which type of Entity they contain
    var foundCollections = [];

    for(var entryPointItemKey in resource) {
        // skip if this is not regular field
        if (entryPointItemKey[0] === '@') {
            continue;
        }

        // Detect url, type, and collection item
        var item = resource[entryPointItemKey];
        var itemUrl = item.__value.__value['@id'];
        var itemType = DataProcessor.currentDoc[item.__iri]['range'];
        var memberOf = DataProcessor.currentDoc[itemType]['member_of'];
        var description = DataProcessor.currentDoc[itemType]['description'];

        foundCollections.push({itemId: memberOf, url: itemUrl});
    }

    return foundCollections;
};
var Article = {};
Article.id = 'http://schema.org/Article';
Article.mapped = false;  // autowired
Article.collectionUrl = '';  // autowired
Article.collectionButtonSelector = '.js-articles-btn';

Article.shortProperties = [
    'http://schema.org/headline',
    'http://schema.org/description',
    'http://schema.org/pageStart',
    'http://schema.org/pageEnd',
    'http://schema.org/wordCount',
    'vocab:AuthorCollection',
    'http://schema.org/Book'
];


Article.__shortTemplate = _.template(
    "<li><a href=\"javascript:App.showElement(0)\">" +
    "<table>" +
    "<tr><th>Title:</th><td><%= title %></td></tr>" +
    "<tr><th>Authors:</th><td><%= authors %></td></tr>" +
    "</table>" +
    "</a></li>"
);

Article.renderShortView = function (index, obj) {
    var authorsStr = 'authors';


    return Article.__shortTemplate({
        title: obj['title'].__value.__value['@value'],
        authors: authorsStr
    });
};
var Author = {};
Author.id = 'http://schema.org/Person';
Author.mapped = false;  // autowired
Author.collectionUrl = '';  // autowired
Author.collectionButtonSelector = '.js-authors-btn';
var Book = {};
Book.id = 'http://schema.org/Book';
Book.mapped = false;  // autowired
Book.collectionUrl = '';  // autowired
Book.collectionButtonSelector = '.js-books-btn';

var Publisher = {};
Publisher.id = 'http://schema.org/Publisher';
Publisher.mapped = false;  // autowired
Publisher.collectionUrl = '';  // autowired
Publisher.collectionButtonSelector = '.js-publishers-btn';
var Models = [
    Article,
    Book,
    Author,
    Publisher
];


function getModelPos(modelToFind) {
    for (var i=0, model = Models[i]; i<Models.length; ++i, model = Models[i]) {
        if (model == modelToFind) {
            return i;
        }
    }
    return -1;
}

function invokeRequest(method, url, data, headers) {
    var self = this;

    var settings = {
        'type': method || 'GET',
        'headers': headers || { 'Accept': 'application/ld+json, application/json;q=0.1' },
        'processData': false,
        'data': data || null,
        'dataType': 'text',
        'async': false
    };

    return $.ajax('proxy.php?url=' + encodeURI(url), settings);
}

function getHeaders(jqXHR) {
    return 'HTTP/1.1 ' + jqXHR.status + ' ' + jqXHR.statusText + "\n" + jqXHR.getAllResponseHeaders();
}


function parseLinkHeader(header) {
    var links = {};

    if (!header || (0 === header.trim().length)) {
        return links;
    }

    var parts = header.split(',');

    for(var i = parts.length - 1; i >= 0; i--) {
        var params = parts[i].split(';');
        var url, rel;
        for (var j = params.length - 1; j >= 0; j--) {
            if ('<' === params[j].trim()[0]) {
                url = params[j].trim().slice(1, -1);
            } else {
                var p = params[j].split('=');
                if ((2 === p.length) && ('rel' === p[0].trim())) {
                    rel = p[1].trim().slice(1, -1);
                }
            }
        }
        if (url && rel) {
            links[rel] = url;
        }
    }

    return links;
}


function parseDocumentationUrlAndLoad(jqXHR) {
    var linkHeaders = parseLinkHeader(jqXHR.getResponseHeader('Link'));
    if (!linkHeaders['http://www.w3.org/ns/hydra/core#apiDocumentation']) {
        alert('Cannot find link to vocab header');
    }
    return loadDocumentation(linkHeaders['http://www.w3.org/ns/hydra/core#apiDocumentation']);
}

function loadDocumentation(apiDocUrl) {
    var result = {};

    $.ajax({
        url: 'proxy.php',
        dataType: 'json',
        async: false,
        data: { 'url': apiDocUrl, 'vocab': 1 },
        success: function(resource) {
            var tmp = resource['@graph'];

            for (var i in tmp) {
                result[tmp[i]['@id']] = tmp[i];
            }
        },
        error: function () {
            alert('Failed to parse vocab');
        }
    });

    return result;
}

function loadRegularUrl(url) {
    var result = [];

    invokeRequest('GET', url).done(function (data) {
        result = JSON.parse(data);
    });

    return result;
}

// This class perform data loading and parsing from server

var DataProcessor = {};

// Autowired
DataProcessor.currentEntryPoint = '';
DataProcessor.currentDoc = '';



/**
 * Clears all parameters. Useful, when loading new entrypoint
 */
DataProcessor.clear = function () {
    DataProcessor.currentEntryPoint = '';
    DataProcessor.currentDoc = '';

    DataProcessor.objects = [];
    for (var i=0; i<Models.length; ++i) {
        DataProcessor.objects.push([]);
    }
};


DataProcessor.load = function (url) {
    // if we load the same server - just skip. Unnecessary calls
    if (DataProcessor.currentEntryPoint === url) {
        return;
    }

    // Clear old parameters
    DataProcessor.clear();

    // Store new entrypoint url ...
    DataProcessor.currentEntryPoint = url;

    // ... and perform full data loading
    //
    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", DataProcessor.currentEntryPoint).done(function (resource, textStatus, jqXHR) {

        // Firstly we need to parse documentation
        if (DataProcessor.currentDoc === '') {
            DataProcessor.currentDoc = parseDocumentationUrlAndLoad(jqXHR);
        }

        // From proxy.php we get JSON response, which is already converted from JSON-LD
        resource = JSON.parse(resource);

        // Parse entrypoint to link collections and urls
        DataProcessor._parseEntryPoint(resource);
        //
        // // We need to figure out, which model's fields supported
        // // by the server and which are not
        // DataProcessor._parseInfoAboutModels();
        //
        // // Load all dataset in memory.
        // // Stupid solution, but I guess that's not important in my case
        // DataProcessor._loadAllData();
    });
};


DataProcessor._parseEntryPoint = function (resource) {
    // Iterate over given response
    // and try to find Entity collection
    // For instance, EntryPoint returned response:
    //      books: /api/books_list
    //      authors: /api/authors_management
    //      publishers: /api/publishers
    // We need to iterate over books, authors and publishers and
    // detect which type of Entity they contain
    for(var entryPointItemKey in resource) {
        // skip if this is not regular field
        if (entryPointItemKey[0] === '@') {
            continue;
        }

        // Detect url, type, and collection item

        var item = resource[entryPointItemKey];
        var itemUrl = item.__value.__value['@id'];
        var itemType = DataProcessor.currentDoc[item.__iri]['range'];
        var memberOf = DataProcessor.currentDoc[itemType]['member_of'];
        var description = DataProcessor.currentDoc[itemType]['description'];

        for (var i=0, model = Models[i]; i<Models.length; ++i, model = Models[i]) {
            if (model.id === memberOf) {
                model.collectionUrl = itemUrl;
                model.mapped = true;
            }
        }
    }
};


DataProcessor._parseInfoAboutModels = function () {
    // We need to figure out, which model's fields supported
    // by the server and which are not
    for (var i=0, model = Models[i]; i<Models.length; ++i, model = Models[i]) {
        DataProcessor._parseInfoAboutModel(model);
    }
};


DataProcessor._parseInfoAboutModel = function (model) {
    // We need to figure out, which model's fields supported
    // by the server and which are not
    console.log(model);
};


DataProcessor._loadAllData = function () {
    // Load all dataset in memory.
    // Stupid solution, but I guess that's not important in my case
    for (var i=0, model = Models[i]; i<Models.length; ++i, model = Models[i]) {
        if (model.mapped) {
            DataProcessor._loadDataForModel(model);
        }
    }
};


DataProcessor._loadDataForModel = function (model) {
    var model_pos = getModelPos(model);
    var collection = loadRegularUrl(model.collectionUrl).members.__value;
    for (var i in collection) {
        // TODO remove from production
        if (i === 3) {
            break;
        }

        var itemUrl = collection[i]['@id'].__value.__value['@id'];
        DataProcessor.objects[model_pos].push(loadRegularUrl(itemUrl));
    }
};






function renderCollectionForModel(model) {
    var html = '<div>';


    html += '<ul>';
    var model_pos = getModelPos(model);
    for (var i in DataProcessor.objects[model_pos]) {
        html += model.renderShortView(i, DataProcessor.objects[model_pos][i]);
    }
    html += '</ul>'


    html += '</div>';
    $('.service-item-list').html(html);
}
function showOverlay() {
    $('#overlay').css('display', 'grid');
}

function hideOverlay() {
    $('#overlay').css('display', 'none');
}
function renderPageAfterServiceLoaded() {
    renderMainButtons();
}


function renderMainButtons() {

    for (var i = 0, model = Models[i]; i < Models.length; ++i, model = Models[i]) {
        var btn = $(model.collectionButtonSelector);
        btn.removeAttr('disabled');
        btn.removeAttr('title');
        if (!model.mapped) {
            btn.attr('disabled', 'disabled');
            btn.attr('title', 'Not mapped in current service!');
        }
    }
}




