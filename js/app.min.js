var App = {};

App.doc = '';


App.connectToService = function (service_url) {
    // Enable visual styles
    showOverlay();
    $('#first-screen').css('display', 'none');

    // Get data from server
    // We need to make async call not to freeze the screen
    setTimeout(function () {
        // first of all - parse entrypoint
        var foundCollections = ServiceConnector.loadEntryPointAndDoc(service_url);
        for (var i in foundCollections) {
            Models[foundCollections[i].itemId].collectionUrl = foundCollections[i].url;
        }

        // Link to buttons
        Renderer.updateMenu(foundCollections);

        // Update list and item areas
        Renderer.resetContentAreas();

        // Update
        $('#service-screen').css('display', 'block');

        // End
        hideOverlay();


        // Scroll then fix feature
        var fixmeTop = $('.fixme').offset().top;
        var fixmeLeft = $('.fixme').offset().left - 8;
        var fixmeWidth = $('.fixme').width();

        $(window).scroll(function () {                  // assign scroll event listener
            var currentScroll = $(window).scrollTop(); // get current position
            if (currentScroll >= fixmeTop) {           // apply position: fixed if you
                $('.fixme').css({                      // scroll to that element or below it
                    position: 'fixed',
                    top: '0',
                    left: fixmeLeft,
                    width: fixmeWidth,
                    height: screen.height
                });
            } else {                                   // apply position: static
                $('.fixme').css({                      // if you scroll above it
                    position: 'static',
                    height: 'auto'
                });
            }

        });

    }, 1);


    // Info about current service
    $('#current-service-url-info').text(service_url);
};


App.showCollectionForModel = function (model, sync) {
    showOverlay();

    var doit = function () {
        // first of all - parse entrypoint
        var collectionItems = ServiceConnector.loadCollection(model, model.collectionUrl);

        // Update list and item areas
        Renderer.renderCollection(collectionItems, model);

        Renderer.resetItemArea();

        $('.service-item-list li a').click(function (e) {
            e.preventDefault();
            App.showItemForModel($(this).attr('href'), model);
        });

        // End
        hideOverlay();
    };

    if (typeof sync !== 'undefined') {
        doit();
    }
    else {
        // Get data from server
        // We need to make async call not to freeze the screen
        setTimeout(doit, 1);
    }
};


App.showItemForModel = function (itemUrl, model) {
    showOverlay();

    var doit = function () {
        // first of all - parse EntryPoint
        var item = ServiceConnector.loadItem(model, itemUrl);

        // Update list and item areas
        Renderer.renderItem(item, model);

        // Bind links
        $('.popup').click(function (e) {
            e.preventDefault();

            var model = Models[$(this).attr('data-model-id')];
            var itemUrl = $(this).attr('href');

            // Menu reset
            $('.control-buttons .btn').removeClass('btn-primary');
            $(model.collectionButtonSelector).addClass('btn-primary');

            // Load list of authors
            App.showCollectionForModel(model, true);
            $('.service-item-list a').each(function () {
                if ($(this).attr('href') === itemUrl) {
                    $(this).parent().addClass('active');
                    return 0;
                }
            });

            // Load author
            App.showItemForModel(itemUrl, model);
        });

        // End
        hideOverlay();
    };

    // Get data from server
    // We need to make async call not to freeze the screen
    setTimeout(doit, 1);
};


App.initialize = function () {
    // Inject to page
    // $('#current-screen').html(data);

    // Fill url param
    var queryParams = {};
    if (window.location.search.length > 1) {
        for (var aItKey, nKeyId = 0, aCouples = window.location.search.substr(1).split("&"); nKeyId < aCouples.length; nKeyId++) {
            aItKey = aCouples[nKeyId].split("=");
            queryParams[unescape(aItKey[0])] = aItKey.length > 1 ? unescape(aItKey[1]) : "";
        }
    }
    if ('url' in queryParams) {
        $('.addressbar .url').val(queryParams.url);
    }

    // "Load service" button
    $('.addressbar').submit(function (e) {
        e.preventDefault();

        var url = $(this).find('.url').val().trim();
        if (!url.length) {
            alert('Please, enter valid URL');
            return;
        }

        if (url.indexOf('http') !== 0) {
            url = 'http://' + url;
        }

        App.connectToService(url);

        return false;
    });

    // Button group switching
    $('.control-buttons .btn').click(function () {
        $('.control-buttons .btn').removeClass('btn-primary');
        $(this).addClass('btn-primary');
        for (var i in Models) {
            if ($(this).is(Models[i].collectionButtonSelector)) {
                App.showCollectionForModel(Models[i]);
            }
        }
    });

    // Links on first screen
    $('.first-screen-wrapper a').click(function (e) {
        e.preventDefault();
        App.connectToService($(this).attr('href'));
    });

    $('#service-screen').css('display', 'none');
};


function showOverlay() {
    $('#overlay').css('display', 'grid');
}

function hideOverlay() {
    $('#overlay').css('display', 'none');
}

$(document).ready(function () {
    hideOverlay();
    App.initialize();
});





var Renderer = {};

Renderer.updateMenu = function (collections) {
    for (var modelKey in Models) {
        var model = Models[modelKey];
        var btn = $(model.collectionButtonSelector);
        btn.removeAttr('disabled');
        btn.removeAttr('title');
        if (model.collectionUrl === '') {
            btn.attr('disabled', 'disabled');
            btn.attr('title', 'Not mapped in current service');
        }
    }
};


Renderer.resetContentAreas = function () {
    Renderer.resetCollectionArea();
    Renderer.resetItemArea();
};


Renderer.resetCollectionArea = function () {
    $('.service-item-list').html('<p class="tip">Please, select the menu item from top part of the screen</p>');
};


Renderer.resetItemArea = function () {
    $('.service-item-content').html('<p class="tip">Please, select the item to show from list in left part of the screen</p>');
};


Renderer.renderCollection = function (collection, model) {
    var res = '<ul>';

    for (var i in collection) {
        var item = collection[i];
        res += model.renderShortView(item);
    }

    res += '</ul>';

    $('.service-item-list').html(res);
};



Renderer.renderItem = function (item, model) {
    $('.service-item-content').html(model.renderView(item));
};





Renderer.renderProperty = function (title, prop) {
    if (typeof prop !== 'undefined') {
        return '<tr><th>' + title + '</th><td>' + prop + '</td></tr>';
    }
    return '';
};
var ServiceConnector = {};
ServiceConnector.vocab = '';


ServiceConnector.loadEntryPointAndDoc = function (entryPointUrl) {
    var foundCollections = [];

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", entryPointUrl).done(function (resource, textStatus, jqXHR) {

        // Firstly we need to parse documentation
        if (ServiceConnector.vocab === '') {
            ServiceConnector.vocab = parseDocumentationUrlAndLoad(jqXHR);
        }

        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);

        // Parse entrypoint to link collections and urls
        foundCollections = ServiceConnector._parseEntryPoint(resource);
    });

    return foundCollections;
};


ServiceConnector._parseEntryPoint = function (resource) {
    // Iterate over given response
    // and try to find Entity collection
    // For instance, EntryPoint returned response:
    //      books: /api/books_list
    //      authors: /api/authors_management
    //      publishers: /api/publishers
    // We need to iterate over books, authors and publishers and
    // detect which type of Entity they contain
    var foundCollections = [];

    for (var entryPointItemKey in resource) {
        // skip if this is not regular field
        if (entryPointItemKey[0] === '@') {
            continue;
        }

        // Detect url, type, and collection item
        var item = resource[entryPointItemKey];
        var itemUrl = item.__value.__value['@id'];
        var itemType = ServiceConnector.vocab[item.__iri]['range'];
        var memberOf = ServiceConnector.vocab[itemType]['member_of'];
        // var description = ServiceConnector.vocab[itemType]['description'];

        foundCollections.push({itemId: memberOf, url: itemUrl});
    }

    return foundCollections;
};


ServiceConnector.loadCollection = function (model, collectionUrl) {
    var items = [];

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", collectionUrl).done(function (resource, textStatus, jqXHR) {
        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);
        var membersArray = resource.members.__value;

        for (var elemId in membersArray) {
            items.push(ServiceConnector.parseResponseAsModelObject(model, membersArray[elemId]));
            // break;
        }
    });

    return items;
};


ServiceConnector.loadItem = function (model, itemUrl) {
    var res = {};

    // Suppose, that links to collections located in EntryPoint
    // So, we need to get EntryPoint items
    // and find which of they are hyperlinks to our collections
    invokeRequest("GET", itemUrl).done(function (resource, textStatus, jqXHR) {
        // From proxy.php we get JSON response, which is already converted from JSON-LD to usual json
        resource = JSON.parse(resource);
        res = ServiceConnector.parseResponseAsModelObject(model, resource);
    });

    return res;
};


ServiceConnector.parseResponseAsModelObject = function (model, jsonItem) {
    var answer = {};

    answer.url = ServiceConnector.parseToId(jsonItem['@id']);
    answer.type = ServiceConnector.parseToId(jsonItem['@type']);

    var vocabDefinedProperties = ServiceConnector.vocab[answer.type].supportedProperties;

    for (var propTitle in jsonItem) {
        if (propTitle[0] === '@') {
            continue;
        }

        var prop = jsonItem[propTitle];

        // Finding type of this property
        var propType = '';
        for (var vocabPropId in vocabDefinedProperties) {
            var vocabProp = vocabDefinedProperties[vocabPropId];
            if (vocabProp['hydra_title'] === propTitle) {
                propType = vocabProp['property'];
                break;
            }
        }


        // May be it is a collection ?
        var currentFieldArray = [];
        if (propType === '' || typeof model.propertiesMap[propType] === 'undefined') {
            var potentialCollection = prop.__value;
            if (typeof potentialCollection !== 'undefined' && $.isArray(potentialCollection)) {
                // parse all objects
                for (var i in potentialCollection) {
                    if (currentFieldArray.length === 0) {
                        propType = ServiceConnector.parseToId(potentialCollection[i]['@type']);
                    }

                    currentFieldArray.push(ServiceConnector.parseResponseAsModelObject(findModelById(propType), potentialCollection[i]));
                }
            }
            else {
                continue;
            }
        }

        // Forming key and value params
        var propKey = model.propertiesMap[propType];
        var propValue = '';
        try {
            if (currentFieldArray.length > 0) {
                propValue = currentFieldArray
            }
            else {
                propValue = ServiceConnector.parseToValue(prop);
            }
        }
        catch (err) {
            propValue = ServiceConnector.parseResponseAsModelObject(model, prop.__value);
        }

        answer[propKey] = propValue;
    }


    return answer;
};


ServiceConnector.parseToId = function (jsonItem) {
    while (typeof jsonItem !== 'string') {
        jsonItem = jsonItem.__value;
        if (typeof jsonItem['@id'] !== 'undefined') {
            jsonItem = jsonItem['@id'];
            break;
        }
    }
    return jsonItem;
};

ServiceConnector.parseToValue = function (jsonItem) {
    while (typeof jsonItem === 'object') {
        jsonItem = jsonItem.__value;
        if (typeof jsonItem['@value'] !== 'undefined') {
            jsonItem = jsonItem['@value'];
            break;
        }
    }
    return jsonItem;
};
var Article = {};
Article.id = 'http://schema.org/Article';
Article.collectionUrl = '';  // autowired
Article.collectionButtonSelector = '.js-articles-btn';

Article.propertiesMap = {
    'http://schema.org/headline': 'title',
    'http://schema.org/description': 'description',
    'http://schema.org/pageStart': 'start page',
    'http://schema.org/pageEnd': 'end page',
    'http://schema.org/wordCount': 'number of words',
    'http://schema.org/Person': 'authors',
    'http://schema.org/Book': 'magazine'
};


Article.renderShortView = function (curArticle) {
    var res = '<li><a href="'+curArticle.url+'">';

    if (typeof curArticle.title !== 'undefined') {
        res += '<div class="short-article-title">' + curArticle.title + '</div>';
    }

    if (typeof curArticle.authors !== 'undefined') {
        var authors_list_str = '';
        for (var i in curArticle.authors) {
            authors_list_str += curArticle.authors[i].name + ', ';
        }
        authors_list_str = authors_list_str.substr(0, authors_list_str.length-2);

        res += '<div class="short-article-authors">' + authors_list_str + '</div>';
    }

    res += '</a></li>';
    return res;
};


Article.renderView = function (obj) {
    var res = '<div class="item-wrapper">';

    // Title
    if (typeof obj.title !== 'undefined') {
        res += '<h2>' + obj.title + '</h2>';
    }

    res += '<table>';

    // Authors
    if (typeof obj.authors !== 'undefined') {
        res += '<tr><th>Authors:</th><td>';
        for (var i in obj.authors) {
            var author = obj.authors[i];
            res += '<li><a href="' + author.url + '" class="popup" data-model-id="http://schema.org/Person">' +
                    author.name  +
                '</a></li>';
        }
        res += '</td></tr>';
    }

    // Magazine
    if (typeof obj.magazine !== 'undefined') {
        res += '<tr><th>Magazine:</th><td><a href="' + obj.magazine.url + '" class="popup" data-model-id="http://schema.org/Book">' +
                obj.magazine.title +
            '</a></td></tr>';
    }

    // Description
    res += Renderer.renderProperty('Description:', obj['description']);

    // Pages
    var pages = '';
    if (typeof obj['start page'] !== 'undefined') {
        pages += obj['start page']
    }
    if (typeof obj['end page'] !== 'undefined') {
        pages += '-'+obj['end page']
    }
    res += Renderer.renderProperty('Pages:', pages);

    // Number of words
    res += Renderer.renderProperty('Number of words:', obj['number of words']);





    res += '</table>';
    res += '</div>';
    return res;
};


var Author = {};
Author.id = 'http://schema.org/Person';
Author.collectionUrl = '';  // autowired
Author.collectionButtonSelector = '.js-authors-btn';

Author.propertiesMap = {
    'http://schema.org/name': 'name',
    'http://schema.org/birthDate': 'birthDate'
};


Author.renderShortView = function (obj) {
    var res = '<li><a href="'+obj.url+'"><table>';

    res += Renderer.renderProperty('', obj['name']);

    res += '</table></a></li>';
    return res;
};


Author.renderView = function (obj) {
    var res = '<div class="item-wrapper">';

    if (typeof obj['name'] !== 'undefined') {
        res += '<h2>' + obj['name'] + '</h2>';
    }

    res += '<table>';
    res += Renderer.renderProperty('Date of birth:', obj['birthDate']);
    res += '</table>';

    res += '</div>';
    return res;
};
var Book = {};
Book.id = 'http://schema.org/Book';
Book.collectionUrl = '';  // autowired
Book.collectionButtonSelector = '.js-books-btn';


Book.propertiesMap = {
    'http://schema.org/headline': 'title',
    'http://schema.org/alternativeHeadline': 'alternativeTitle',
    'http://schema.org/description': 'description',
    'http://schema.org/copyrightYear': 'copyrightYear',
    'http://schema.org/bookEdition': 'bookEdition',
    'http://schema.org/numberOfPages': 'numberOfPages',
    'http://schema.org/isbn': 'isbn',
    'http://schema.org/Person': 'authors',
    'http://schema.org/Publisher': 'publisher'
};


Book.renderShortView = function (obj) {
    var res = '<li><a href="'+obj.url+'"><table>';

    res += Renderer.renderProperty('', obj['title']);

    // TODO add authors

    res += '</table></a></li>';
    return res;
};


Book.renderView = function (obj) {
    var res = '<div class="item-wrapper">';

    if (typeof obj['title'] !== 'undefined') {
        res += '<h2>' + obj['title'] + '</h2>';
    }

    res += '<table>';


    res += Renderer.renderProperty('Alt. title:', obj['alternativeHeadline']);
    res += Renderer.renderProperty('Description:', obj['description']);
    res += Renderer.renderProperty('Publish year:', obj['copyrightYear']);
    res += Renderer.renderProperty('Page count:', obj['numberOfPages']);
    res += Renderer.renderProperty('Edition:', obj['bookEdition']);
    res += Renderer.renderProperty('ISBN:', obj['isbn']);

    res += Renderer.renderProperty('Person:', obj['Person']);
    res += Renderer.renderProperty('Publisher:', obj['Publisher']);

    res += '</table></div>';
    return res;
};
var Publisher = {};
Publisher.id = 'http://schema.org/Publisher';
Publisher.collectionUrl = '';  // autowired
Publisher.collectionButtonSelector = '.js-publishers-btn';


Publisher.propertiesMap = {
    'http://schema.org/name': 'name',
    'http://schema.org/foundingDate': 'foundingDate',
    'http://schema.org/location': 'location'
};


Publisher.renderShortView = function (obj) {
    var res = '<li><a href="'+obj.url+'"><table>';

    res += Renderer.renderProperty('', obj['name']);

    res += '</table></a></li>';
    return res;
};


Publisher.renderView = function (obj) {
    var res = '<div class="item-wrapper">';

    if (typeof obj['name'] !== 'undefined') {
        res += '<h2>' + obj['name'] + '</h2>';
    }

    res += '<table>';

    res += Renderer.renderProperty('Founding date:', obj['foundingDate']);
    res += Renderer.renderProperty('Current location:', obj['location']);

    res += '</table></div>';
    return res;
};
var Models = {
    'http://schema.org/Article': Article,
    'http://schema.org/Person': Author,
    'http://schema.org/Book': Book,
    'http://schema.org/Publisher': Publisher
};



function findModelById(id_string) {
    for (var key in Models) {
        if (key === id_string) {
            return Models[key];
        }
    }
    return null;
}

function invokeRequest(method, url, data, headers) {
    var self = this;

    var settings = {
        'type': method || 'GET',
        'headers': headers || { 'Accept': 'application/ld+json, application/json;q=0.1' },
        'processData': false,
        'data': data || null,
        'dataType': 'text',
        'async': false
    };

    return $.ajax('proxy.php?url=' + encodeURI(url), settings);
}

function getHeaders(jqXHR) {
    return 'HTTP/1.1 ' + jqXHR.status + ' ' + jqXHR.statusText + "\n" + jqXHR.getAllResponseHeaders();
}


function parseLinkHeader(header) {
    var links = {};

    if (!header || (0 === header.trim().length)) {
        return links;
    }

    var parts = header.split(',');

    for(var i = parts.length - 1; i >= 0; i--) {
        var params = parts[i].split(';');
        var url, rel;
        for (var j = params.length - 1; j >= 0; j--) {
            if ('<' === params[j].trim()[0]) {
                url = params[j].trim().slice(1, -1);
            } else {
                var p = params[j].split('=');
                if ((2 === p.length) && ('rel' === p[0].trim())) {
                    rel = p[1].trim().slice(1, -1);
                }
            }
        }
        if (url && rel) {
            links[rel] = url;
        }
    }

    return links;
}


function parseDocumentationUrlAndLoad(jqXHR) {
    var linkHeaders = parseLinkHeader(jqXHR.getResponseHeader('Link'));
    if (!linkHeaders['http://www.w3.org/ns/hydra/core#apiDocumentation']) {
        alert('Cannot find link to vocab header');
    }
    return loadDocumentation(linkHeaders['http://www.w3.org/ns/hydra/core#apiDocumentation']);
}

function loadDocumentation(apiDocUrl) {
    var result = {};

    $.ajax({
        url: 'proxy.php',
        dataType: 'json',
        async: false,
        data: { 'url': apiDocUrl, 'vocab': 1 },
        success: function(resource) {
            var tmp = resource['@graph'];

            for (var i in tmp) {
                result[tmp[i]['@id']] = tmp[i];
            }
        },
        error: function () {
            alert('Failed to parse vocab');
        }
    });

    return result;
}

function loadRegularUrl(url) {
    var result = [];

    invokeRequest('GET', url).done(function (data) {
        result = JSON.parse(data);
    });

    return result;
}
